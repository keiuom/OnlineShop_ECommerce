// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Order.Services.Mails.MailTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Training\BackendProject\OnlineShop\Order.Services\Mails\MailTemplates\OrderSuccessMailTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class OrderSuccessMailTemplate : OrderSuccessMailTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org" +
                    "/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xh" +
                    "tml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" style=\"width:100%;font-fa" +
                    "mily:arial, &#39;helvetica neue&#39;, helvetica, sans-serif;-webkit-text-size-ad" +
                    "just:100%;-ms-text-size-adjust:100%;padding:0;Margin:0\"><head><meta http-equiv=\"" +
                    "Content-Type\" content=\"text/html; charset=UTF-8\"> \r\n   \r\n  <meta content=\"width=" +
                    "device-width, initial-scale=1\" name=\"viewport\"> \r\n  <meta name=\"x-apple-disable-" +
                    "message-reformatting\"> \r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">" +
                    " \r\n  <meta content=\"telephone=no\" name=\"format-detection\"> \r\n  <link rel=\"styles" +
                    "heet\" href=\"https://fonts.googleapis.com/css?family=Poppins\">\r\n  <link rel=\"styl" +
                    "esheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat\">\r\n  <title>Spe" +
                    "ndPlan.Ins</title> \r\n  <!--[if (mso 16)]>\r\n    <style type=\"text/css\">\r\n    a {t" +
                    "ext-decoration: none;}\r\n    body{\r\n            background-color: #FFFFFF;\r\n     " +
                    "       width: 980;\r\n            margin: 80px auto;\r\n            text-align: cent" +
                    "er;\r\n        }\r\n        a{\r\n            text-decoration: none;\r\n        }\r\n\r\n   " +
                    " </style>\r\n    <![endif]--> \r\n  <!--[if gte mso 9]><style>sup { font-size: 100% " +
                    "!important; }</style><![endif]--> \r\n  <!--[if gte mso 9]>\r\n<xml>\r\n    <o:OfficeD" +
                    "ocumentSettings>\r\n    <o:AllowPNG></o:AllowPNG>\r\n    <o:PixelsPerInch>96</o:Pixe" +
                    "lsPerInch>\r\n    </o:OfficeDocumentSettings>\r\n</xml>\r\n<![endif]--> \r\n<style type=" +
                    "\"text/css\">\r\n@media only screen and (max-width:600px) {p, ul li, ol li, a { font" +
                    "-size:14px!important; line-height:150%!important } h1 { font-size:24px!important" +
                    "; text-align:left; line-height:120%; margin-bottom:24px } h2 { font-size:20px!im" +
                    "portant; text-align:left; line-height:120%; margin-bottom:20px } h3 { font-size:" +
                    "16px!important; text-align:left; line-height:120%; margin-bottom:16px } h1 a { f" +
                    "ont-size:24px!important; text-align:left } h2 a { font-size:20px!important; text" +
                    "-align:left } h3 a { font-size:16px!important; text-align:left } .es-menu td a {" +
                    " font-size:16px!important } .es-header-body p, .es-header-body ul li, .es-header" +
                    "-body ol li, .es-header-body a { font-size:14px!important } .es-footer-body p, ." +
                    "es-footer-body ul li, .es-footer-body ol li, .es-footer-body a { font-size:12px!" +
                    "important } .es-infoblock p, .es-infoblock ul li, .es-infoblock ol li, .es-infob" +
                    "lock a { font-size:12px!important } *[class=\"gmail-fix\"] { display:none!importan" +
                    "t } .es-m-txt-c, .es-m-txt-c h1, .es-m-txt-c h2, .es-m-txt-c h3 { text-align:cen" +
                    "ter!important } .es-m-txt-r, .es-m-txt-r h1, .es-m-txt-r h2, .es-m-txt-r h3 { te" +
                    "xt-align:right!important } .es-m-txt-l, .es-m-txt-l h1, .es-m-txt-l h2, .es-m-tx" +
                    "t-l h3 { text-align:left!important } .es-m-txt-r img, .es-m-txt-c img, .es-m-txt" +
                    "-l img { display:inline!important } .es-button-border { display:block!important " +
                    "} a.es-button { font-size:14px!important; display:block!important; border-left-w" +
                    "idth:0px!important; border-right-width:0px!important } .es-btn-fw { border-width" +
                    ":10px 0px!important; text-align:center!important } .es-adaptive table, .es-btn-f" +
                    "w, .es-btn-fw-brdr, .es-left, .es-right { width:100%!important } .es-content tab" +
                    "le, .es-header table, .es-footer table, .es-content, .es-footer, .es-header { wi" +
                    "dth:100%!important; max-width:600px!important } .es-adapt-td { display:block!imp" +
                    "ortant; width:100%!important } .adapt-img { width:100%!important; height:auto!im" +
                    "portant } .es-m-p0 { padding:0px!important } .es-m-p0r { padding-right:0px!impor" +
                    "tant } .es-m-p0l { padding-left:0px!important } .es-m-p0t { padding-top:0px!impo" +
                    "rtant } .es-m-p0b { padding-bottom:0!important } .es-m-p20b { padding-bottom:20p" +
                    "x!important } .es-mobile-hidden, .es-hidden { display:none!important } tr.es-des" +
                    "k-hidden, td.es-desk-hidden, table.es-desk-hidden { display:table-row!important;" +
                    " width:auto!important; overflow:visible!important; float:none!important; max-hei" +
                    "ght:inherit!important; line-height:inherit!important } .es-desk-menu-hidden { di" +
                    "splay:table-cell!important } table.es-table-not-adapt, .esd-block-html table { w" +
                    "idth:auto!important } table.es-social { display:inline-block!important } table.e" +
                    "s-social td { display:inline-block!important } .es-m-margin { padding-left:5px!i" +
                    "mportant; padding-right:5px!important; padding-top:5px!important; padding-bottom" +
                    ":5px!important } p, ul li, ol li { margin-bottom:11px!important } .es-header-bod" +
                    "y p, .es-header-body ul li, .es-header-body ol li { margin-bottom:11px!important" +
                    " } .es-footer-body p, .es-footer-body ul li, .es-footer-body ol li { margin-bott" +
                    "om:9px!important } .es-infoblock p, .es-infoblock ul li, .es-infoblock ol li { m" +
                    "argin-bottom:9px!important } }\r\n#outlook a {\r\n\tpadding:0;\r\n}\r\n</style>\r\n</head> " +
                    "\r\n <body style=\"background-color: #FFFFFF;width: 880px;margin: 80px auto;text-al" +
                    "ign: center; text-decoration:none\"> \r\n     <div class=\"main\" style=\"width:650px;" +
                    " margin:0 auto;\">\r\n        <h1 class=\"title\" style=\"font-size: 48px;font-weight:" +
                    " 700;text-align: center;color: #526192;font-family: \'Poppins\', \'sans-serif\';\">On" +
                    "lineShop</h1>\r\n        <p style=\"text-align:left; margin:15px 0; color:green; fo" +
                    "nt-size: 24px;font-family: \'Poppins\', \'sans-serif\';font-weight: 500;line-height:" +
                    " 29.26px;\">Your order has been placed successfully!</p>\r\n        <p style=\"text-" +
                    "align:left; margin:15px 0;color:#000000; font-size: 24px;font-family: \'Poppins\'," +
                    " \'sans-serif\';font-weight: 500;line-height: 29.26px;\">Please click the button be" +
                    "low to track your order.</p>\r\n        <a style=\"text-decoration:none; padding: 1" +
                    "2px 100px;background: #18A0FB;border-radius: 6px;display: inline-block;font-fami" +
                    "ly: \'Poppins\', \'sans-serif\';font-weight: 500;font-size: 24px;line-height: 29.26p" +
                    "x;letter-spacing: -1.5%;text-align: center;color:#FFFFFF;margin: 20px 0 70px 0;\"" +
                    " class=\"activate-button\" href=\"");
            
            #line 52 "C:\Training\BackendProject\OnlineShop\Order.Services\Mails\MailTemplates\OrderSuccessMailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OrderId));
            
            #line default
            #line hidden
            this.Write(@""" target=""_blank"">Track Your Order</a>
    </div>
    <div class=""alert"" style=""padding: 10px 20px;width: 750px;height: 203px;background: #EDEDED;border-radius: 15px;margin: 0 auto;margin-bottom: 50px;letter-spacing: -1.5%;text-align: left;"">
        <h2 style=""color:#000000; font-family: 'Poppins', 'sans-serif';font-weight: 500;font-size: 36px;line-height: 40px;"">Need Help?</h2>
        <p style=""color:#000000; margin:15px 0; font-size: 24px;font-family: 'Poppins', 'sans-serif';font-weight: 400; padding:0; margin:0;"">We are delighted to help you along the way. Simply email</p>
        <p style=""color:#000000; margin:15px 0; font-size: 24px;font-family: 'Poppins', 'sans-serif';font-weight: 400; padding:0; margin:0;""><a href=""mailto:");
            
            #line 57 "C:\Training\BackendProject\OnlineShop\Order.Services\Mails\MailTemplates\OrderSuccessMailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SupportUserEmail));
            
            #line default
            #line hidden
            this.Write("\" style=\"text-decoration: none;color: #0085FF;\">");
            
            #line 57 "C:\Training\BackendProject\OnlineShop\Order.Services\Mails\MailTemplates\OrderSuccessMailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SupportUserEmail));
            
            #line default
            #line hidden
            this.Write("</a> and we\'ll be happy to answer your questions.</p>\r\n    </div>\r\n</body></html>" +
                    "");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class OrderSuccessMailTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
